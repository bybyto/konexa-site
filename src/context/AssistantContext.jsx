import React, { createContext, useState, useEffect } from 'react';
import { useContext } from 'react';
import { AuthContext } from './AuthContext';
import { ThemeContext } from './ThemeContext';

// Create the Assistant Context
export const AssistantContext = createContext();

// Default assistant theme settings
export const DEFAULT_ASSISTANT_THEME = {
  primaryColor: '#4f46e5', // Default primary color (indigo-600)
  accentColor: '#7c3aed', // Default accent color (purple-600)
  avatarStyle: 'gradient', // Options: 'gradient', 'solid', 'outline'
  bubbleStyle: 'rounded', // Options: 'rounded', 'modern', 'classic'
  fontStyle: 'default', // Options: 'default', 'playful', 'formal'
};

export const AssistantProvider = ({ children }) => {
  const { user } = useContext(AuthContext);
  const { theme } = useContext(ThemeContext);
  const [messages, setMessages] = useState([]);
  const [isOpen, setIsOpen] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [conversationHistory, setConversationHistory] = useState([]);
  const [hasBeenWelcomed, setHasBeenWelcomed] = useState(false);
  const [assistantTheme, setAssistantTheme] = useState(DEFAULT_ASSISTANT_THEME);

  // Initial greeting message
  useEffect(() => {
    if (user && !hasBeenWelcomed) {
      sendWelcomeMessage();
      setHasBeenWelcomed(true);
    }
  }, [user]);

  // Load conversation history and theme from localStorage
  useEffect(() => {
    if (user) {
      // Load conversation history
      const savedMessages = JSON.parse(localStorage.getItem(`konexa_assistant_${user.username}`)) || [];
      if (savedMessages.length > 0) {
        setMessages(savedMessages);
        setConversationHistory(savedMessages.map(msg => ({
          role: msg.sender === 'assistant' ? 'assistant' : 'user',
          content: msg.text
        })));
      } else {
        sendWelcomeMessage();
      }
      
      // Load assistant theme preferences
      const savedAssistantTheme = JSON.parse(localStorage.getItem(`konexa_assistant_theme_${user.username}`));
      if (savedAssistantTheme) {
        setAssistantTheme(savedAssistantTheme);
      } else {
        localStorage.setItem(`konexa_assistant_theme_${user.username}`, JSON.stringify(DEFAULT_ASSISTANT_THEME));
      }
    }
  }, [user]);

  // Save messages to localStorage whenever they change
  useEffect(() => {
    if (user && messages.length > 0) {
      localStorage.setItem(`konexa_assistant_${user.username}`, JSON.stringify(messages));
    }
  }, [messages, user]);

  // Toggle assistant visibility
  const toggleAssistant = () => {
    setIsOpen(!isOpen);
    if (!isOpen && messages.length === 0) {
      sendWelcomeMessage();
    }
  };

  // Send welcome message based on time of day
  const sendWelcomeMessage = () => {
    const hour = new Date().getHours();
    let greeting = '';
    
    if (hour < 12) {
      greeting = 'Bonjour';
    } else if (hour < 18) {
      greeting = 'Bon apr√®s-midi';
    } else {
      greeting = 'Bonsoir';
    }
    
    const welcomeMessage = `${greeting} ${user ? user.username : ''}! üëã\n\nJe suis Bybyto, votre assistant intelligent pour la plateforme Konexa.\n\nKonexa est un espace communautaire anonyme o√π tout le monde peut parler, partager, se divertir, ouvrir des sujets librement et dans le respect. Chacun peut rester anonyme tout en cr√©ant des liens sinc√®res.\n\nLe site Konexa a √©t√© cr√©√© avec passion par Rooby.\n\nComment puis-je vous aider aujourd'hui ?`;
    
    addMessage(welcomeMessage, 'assistant');
  };

  // Add a message to the messages array
  const addMessage = (text, sender) => {
    const newMessage = {
      text,
      sender,
      timestamp: new Date().toISOString()
    };
    
    setMessages(prevMessages => [...prevMessages, newMessage]);
    
    if (sender === 'user') {
      setConversationHistory(prev => [...prev, { role: 'user', content: text }]);
    } else {
      setConversationHistory(prev => [...prev, { role: 'assistant', content: text }]);
    }
  };

  // Process user message and generate response
  const processUserMessage = async (userMessage) => {
    setIsTyping(true);
    
    // In a real implementation, this would call OpenAI or another LLM API
    // For now we'll simulate an intelligent response with a delay
    await new Promise(resolve => setTimeout(resolve, 1200 + Math.random() * 1500));
    
    let response;
    const userMessageLower = userMessage.toLowerCase();
    
    // Enhanced pattern matching for common questions with more dynamic responses
    if (userMessageLower.match(/\b(bonjour|salut|hello|coucou|hey)\b/)) {
      const greetings = [
        `Bonjour ${user?.username || ''}! Comment puis-je vous aider aujourd'hui?`,
        `Salut ${user?.username || ''}! Ravi de vous revoir. Que puis-je faire pour vous?`,
        `Bonjour! Je suis Bybyto, pr√™t √† r√©pondre √† toutes vos questions sur Konexa.`
      ];
      response = greetings[Math.floor(Math.random() * greetings.length)];
    }
    else if (userMessageLower.match(/\b(fonctionn|utiliser|marche|comment|aide|guide)\b/)) {
      response = "Konexa est simple √† utiliser :\n\n1. Parcourez la communaut√© pour voir les messages publics\n2. Participez aux sondages hebdomadaires\n3. Envoyez des messages priv√©s en cliquant sur le nom d'un utilisateur\n4. Personnalisez vos param√®tres dans la section r√©glages\n\nJe peux vous guider pour chaque fonctionnalit√© sp√©cifique si vous le souhaitez!";
    }
    else if (userMessageLower.match(/\b(cr√©ateur|cr√©√©|cr√©ateur|fondateur|rooby)\b/)) {
      response = "Le site Konexa a √©t√© cr√©√© avec passion par Rooby. Son objectif √©tait de rapprocher les gens dans un cadre sain et bienveillant, tout en respectant leur anonymat. C'est une plateforme qui permet de cr√©er des liens sinc√®res tout en pr√©servant votre vie priv√©e.";
    }
    else if (userMessageLower.match(/\b(anonym|priv√©|confidential|secret|donn√©es|personnelles)\b/)) {
      response = "L'anonymat est au c≈ìur de Konexa. Votre vrai nom n'est jamais affich√© - seul votre pseudo est visible par les autres utilisateurs. M√™me dans les conversations priv√©es, vous restez anonyme. Nous prenons tr√®s au s√©rieux la protection de votre vie priv√©e et de vos donn√©es personnelles.";
    }
    else if (userMessageLower.match(/\b(sondage|poll|vote|question|opinion)\b/)) {
      response = "Les sondages sont publi√©s r√©guli√®rement sur des sujets vari√©s et d'actualit√©. Vous pouvez voter et voir les r√©sultats en temps r√©el. Chaque vote est anonyme, et les r√©sultats sont partag√©s avec toute la communaut√©. Si vous avez une id√©e de sondage int√©ressante, n'h√©sitez pas √† la sugg√©rer!";
    }
    else if (userMessageLower.match(/\b(message|messagerie|mp|dm|communiqu|conversation|priv√©)\b/)) {
      response = "Pour acc√©der √† la messagerie, cliquez sur 'Messagerie' dans la barre lat√©rale. Pour envoyer un message priv√© √† un utilisateur, cliquez sur son nom dans la section communaut√©, puis sur 'Discuter en priv√©'. Vos conversations priv√©es sont chiffr√©es et s√©curis√©es.\n\nN'oubliez pas que vous pouvez toujours revenir √† l'accueil avec le bouton 'Retour √† l'accueil' en haut de la page messagerie.";
    }
    else if (userMessageLower.match(/\b(merci|thanks|thx|remercie)\b/)) {
      const thankResponses = [
        "Avec plaisir! N'h√©sitez pas si vous avez d'autres questions. Je suis l√† pour vous aider.",
        "Je vous en prie. C'est toujours un plaisir de vous aider dans votre exp√©rience sur Konexa!",
        "De rien! N'h√©sitez pas √† revenir vers moi si vous avez besoin de quoi que ce soit."
      ];
      response = thankResponses[Math.floor(Math.random() * thankResponses.length)];
    }
    else if (userMessageLower.match(/\b(qui es[\-\s]tu|t'appelles|ton nom|bybyto)\b/)) {
      response = "Je suis Bybyto, l'assistant intelligent de Konexa. J'ai √©t√© con√ßu pour vous aider √† naviguer sur la plateforme, r√©pondre √† vos questions et am√©liorer votre exp√©rience utilisateur. Je parle uniquement fran√ßais et j'apprends constamment pour mieux vous servir. Le site Konexa a √©t√© cr√©√© avec passion par Rooby, et je suis l√† pour repr√©senter cet esprit d'entraide et de communaut√©.";
    }
    else if (userMessageLower.match(/\b(param√®tre|r√©glage|setting|profil|compte|pr√©f√©rence)\b/)) {
      response = "Vous pouvez personnaliser votre exp√©rience Konexa dans la section 'R√©glages'. Vous y trouverez des options pour modifier votre profil, g√©rer vos notifications, changer vos pr√©f√©rences visuelles et configurer vos param√®tres de confidentialit√©. Votre exp√©rience sur Konexa est enti√®rement personnalisable!";
    }
    else if (userMessageLower.match(/\b(comment te contacter|assistance|probl√®me|aide|bug|erreur)\b/)) {
      response = "Si vous rencontrez un probl√®me technique ou avez besoin d'une assistance particuli√®re, vous pouvez contacter l'√©quipe Konexa via la section 'Aide' dans les r√©glages. Je suis √©galement l√† pour essayer de r√©soudre vos probl√®mes les plus courants. D√©crivez-moi ce que vous rencontrez comme difficult√©, et je ferai de mon mieux pour vous aider.";
    }
    else {
      // More sophisticated default responses for general queries
      const defaultResponses = [
        `Merci pour votre message. Je suis Bybyto, votre assistant intelligent sur Konexa. Comment puis-je vous aider davantage aujourd'hui?`,
        `Je comprends votre question. Pour y r√©pondre au mieux, pourriez-vous me donner plus de d√©tails? Je suis l√† pour vous guider sur tous les aspects de Konexa.`,
        `C'est une excellente question! En tant qu'assistant √©volutif, j'apprends constamment pour am√©liorer mes r√©ponses. Le site Konexa a √©t√© cr√©√© avec passion par Rooby, et je suis l√† pour vous aider √† en tirer le meilleur parti.`,
        `Votre question est int√©ressante! Je vous invite √† explorer les diff√©rentes sections de Konexa pour d√©couvrir toutes les possibilit√©s offertes par la plateforme. Y a-t-il un aspect particulier qui vous int√©resse?`,
        `Je suis Bybyto, l'assistant intelligent de Konexa, et je suis l√† pour vous guider. Que souhaitez-vous savoir sur notre communaut√©?`
      ];
      
      response = defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
    }
    
    setIsTyping(false);
    addMessage(response, 'assistant');
  };

  // Send message (from user or assistant)
  const sendMessage = (text, sender = 'user') => {
    addMessage(text, sender);
    
    // If message is from user, generate assistant response
    if (sender === 'user') {
      processUserMessage(text);
    }
  };

  // Clear conversation history
  const clearConversation = () => {
    setMessages([]);
    setConversationHistory([]);
    if (user) {
      localStorage.removeItem(`konexa_assistant_${user.username}`);
    }
    sendWelcomeMessage();
  };

  // Update assistant theme
  const updateAssistantTheme = (newThemeSettings) => {
    const updatedTheme = { ...assistantTheme, ...newThemeSettings };
    setAssistantTheme(updatedTheme);
    if (user) {
      localStorage.setItem(`konexa_assistant_theme_${user.username}`, JSON.stringify(updatedTheme));
    }
  };

  return (
    <AssistantContext.Provider value={{
        messages,
        sendMessage,
        isOpen,
        toggleAssistant,
        isTyping,
        clearConversation,
        assistantTheme,
        updateAssistantTheme
      }}>
      {children}
    </AssistantContext.Provider>
  );
};